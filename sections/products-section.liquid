{% schema %}
{
  "name": "Product Grid with Popup",
  "settings": [
    {
      "type": "header",
      "content": "Product Grid Settings"
    },
    {
      "type": "text",
      "label": "Title",
      "id": "section_title",
      "default": "Featured Products"
    },
    {
      "type": "checkbox",
      "label": "Enable Color Options",
      "id": "enable_color_options",
      "default": true
    },
    {
      "type": "checkbox",
      "label": "Enable Size Options",
      "id": "enable_size_options",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "Default",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<div class="product-grid">
  {% for product in collections.all.products %}
    <div class="product-item" data-product-id="{{ product.id }}">
      <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}" class="product-image">
    </div>
  {% endfor %}
</div>

<!-- Modal for Product Details -->
<div id="productModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <div id="modalData">
      <img id="modalImage" src="" alt="">
      <h2 id="modalTitle"></h2>
      <p id="modalDescription"></p>
      <p id="modalPrice"></p>
      <p>
        <label for="color">Color:</label>
        <select id="color"></select>
      </p>
      <p>
        <label for="size">Size:</label>
        <select id="size"></select>
      </p>
      <button id="addToCartBtn">Add to Cart</button>
    </div>
  </div>
</div>

<script>
  // Dynamically generated product data from Shopify
  const products = [
    {% for product in collections.all.products %}
      {
        id: {{ product.id }},
        title: "{{ product.title }}",
        price: {{ product.price | money_without_currency }},
        description: "{{ product.description | strip_html | truncatewords: 20 }}",
        image: "{{ product.featured_image | img_url: 'medium' }}",
        options: [
          {% for option in product.options_with_values %}
            {
              name: "{{ option.name }}",
              values: [
                {% for value in option.values %}
                  "{{ value }}"{% if forloop.last == false %},{% endif %}
                {% endfor %}
              ]
            }
          {% endfor %}
        ]
      }
      {% if forloop.last == false %},{% endif %}
    {% endfor %}
  ];

  // Function to render the product grid dynamically
  function renderProductGrid() {
    const productGrid = document.querySelector('.product-grid');
    products.forEach(product => {
      const productItem = document.createElement('div');
      productItem.classList.add('product-item');
      productItem.setAttribute('data-product-id', product.id);
      
      const productImage = document.createElement('img');
      productImage.src = product.image;
      productImage.alt = product.title;
      productImage.classList.add('product-image');
      
      productItem.appendChild(productImage);
      productGrid.appendChild(productItem);

      // Add event listener to each product image for modal functionality
      productImage.addEventListener('click', function() {
        openModal(product.id);
      });
    });
  }

  // Function to open the modal and display product details
  function openModal(productId) {
    const product = products.find(p => p.id === productId);

    const modal = document.getElementById('productModal');
    const modalImage = document.getElementById('modalImage');
    const modalTitle = document.getElementById('modalTitle');
    const modalDescription = document.getElementById('modalDescription');
    const modalPrice = document.getElementById('modalPrice');
    const colorSelect = document.getElementById('color');
    const sizeSelect = document.getElementById('size');

    modalImage.src = product.image;
    modalTitle.textContent = product.title;
    modalDescription.textContent = product.description;
    modalPrice.textContent = `${product.price}â‚¬`;

    // Populate the color options
    colorSelect.innerHTML = '';
    product.options[0].values.forEach(value => {
      const option = document.createElement('option');
      option.value = value;
      option.textContent = value;
      colorSelect.appendChild(option);
    });

    // Populate the size options
    sizeSelect.innerHTML = '';
    product.options[1].values.forEach(value => {
      const option = document.createElement('option');
      option.value = value;
      option.textContent = value;
      sizeSelect.appendChild(option);
    });

    modal.style.display = 'block';
  }

  // Function to close the modal
  function closeModal() {
    const modal = document.getElementById('productModal');
    modal.style.display = 'none';
  }

  // Add event listener to close modal when clicking the 'X' button
  document.querySelector('.close').addEventListener('click', closeModal);

  // Close the modal when clicking outside of it
  window.addEventListener('click', function(event) {
    if (event.target === document.getElementById('productModal')) {
      closeModal();
    }
  });

  // Function to add the selected product to the cart
  document.getElementById('addToCartBtn').addEventListener('click', function() {
    const selectedColor = document.getElementById('color').value;
    const selectedSize = document.getElementById('size').value;
    console.log(`Added ${document.getElementById('modalTitle').textContent} to cart with color ${selectedColor} and size ${selectedSize}`);
    
    // Add your cart logic here (e.g., Shopify AJAX API)
  });

  // Render the product grid on page load
  renderProductGrid();
</script>

<style>
  .product-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 16px;
  }

  .product-item {
    text-align: center;
    cursor: pointer;
  }

  .product-image {
    max-width: 100%;
    height: auto;
    cursor: pointer; /* Makes the image clickable */
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
  }

  .modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
  }

  .close {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    position: absolute;
    top: 0;
    right: 25px;
    font-family: Arial, sans-serif;
  }

  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }
</style>
